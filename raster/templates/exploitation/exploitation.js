{% load static %}
var prevs
var y= new Date().getFullYear()
var m = new Date().getMonth()
var i
var poll="MULTI"
var tab_mois=new Array("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre");
last_prev={}

function build_poll_menu(){
    $.ajax({
        url: '{% url "get_poll_menu"  %}',
        async : true,
        success : function(msg){
            
            $('#poll-menu').append(msg)
        }
    });   
}
function setDate(month,year){
    m = month
    y = year
    buildGlobMenu() 
}

function switch_poll(p){
    poll = p
    buildGlobMenu()

}
function daysInMonth (month, year) {
    return new Date(year, month, 0).getDate();
}

function buildMenu(){
    month=m+1
    var d=daysInMonth(month,y)
    console.log(d)
    var e=4
    html=""
   // html+='<h5 align="center">'+poll+'</h5>'
    html+='<table id="calendar-table" class="table table-bordered table-responsive t2"><tr><th style="width : 60px;" >'+poll+'</th>'
       

   // for (i=-3;i<=d+3;i++){
        for (j=1-3;j<=d+3;j++){
            var cl = 'out-month'
            if ((j<d+1) && (j>0)){
                cl='cur-month'
                
                
            }
            tsp =new Date(y,m,j).getTime()/1000
           
            $.ajax ({
                url : '{% url "getzip" %}',
                data : { tsp  :  tsp.toString()},
                async : false,
                success : function (msg){
                    console.log(msg)
                    html+='<th class="calendar-th '+cl+ '"><a href="http://' +msg + '" download>' +j.toString() +'</th>' 
                }
            })
            
        }

    //}
        html+='</tr></thead><tbody>'

    for (ech=0; ech < e; ech++){
        
        html+='<tr><th class="calendar-th">'+(ech-1).toString() + '</th>'
        
        for (i=1-3;i<=d+3;i++){
            // console.log(m)
            // console.log(y)
            // console.log(i)
            html+='<td id="'+new Date(y,m,i).getTime().toString()+'-'+ech.toString()+'" class="calendar-td" onclick=setMenu('+new Date(y,m,i).getTime().toString()+','+ech.toString()+','+'\''+poll+'\'' +')></td>' 
            
        }
        html+='</tr>'
    }
    html+='</tbody></table>'
 
 
    return html
        
}

function buildGlobMenu(){
    html=""
    $("#calendar").children().remove()
    html+=buildMenu()
    $('#month-h3').text(tab_mois[m])
    $("#calendar").append(html)
    $(".calendar-th").css('padding',4)
}
build_poll_menu()
buildGlobMenu()
$(function() {
  
    $('#datepicker').datepicker( {
        changeMonth: true,
        changeYear: true,
        showButtonPanel: true,
      yearRange : "2017:2018",
        dateFormat: 'MM yy',
        onClose: function(dateText, inst) { 
            $(this).datepicker('setDate', new Date(inst.selectedYear, inst.selectedMonth, 1));
            console.log(inst.selectedYear)
            setDate(inst.selectedMonth,inst.selectedYear)
      
        }
    });
});
var jp0 = 'Auj'
var jm1 = 'Hier'
var jm2 = 'Av-Hier'

/* Creation de la carte */
/* gestionnaire de couches */
//couche active du map-block1
var activeLayer1;
//couche active du map-block2
var activeLayer2;
//TODO : check obsolete?
var baseLayers = {
};
//dict des sources du map-block1
var overlayLayers1 = {
};
//dict des sources du map-block2
var overlayLayers2 = {
};
//dict de toutes les couches vecteurs
var vectorLayers = {    
}
var map = L.map('map', { zoomControl:false }, {layers: []}).setView([45, 5.0], 8);    
map.attributionControl.addAttribution('CARINE v3 &copy; ATMO Aura - 2017</a>'); 
var mapbox_light = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoicmh1bSIsImEiOiJjaWx5ZmFnM2wwMGdidmZtNjBnYzVuM2dtIn0.MMLcyhsS00VFpKdopb190Q', {
    maxZoom: 18,
    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
        '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
        'Imagery ?<a href="http://mapbox.com">Mapbox</a>',
    id: 'mapbox.light',
    opacity: 1.,
});   
mapbox_light.addTo(map);

//fonction popup sur champ 'nom'
//utilis?ar les couches vecteurs
function highlightFeature(e) {
    var layer = e.target;

    layer.setStyle({
        weight: 5,
        color: '#666',
        dashArray: '',
        fillOpacity: 0.1
    });

    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        layer.bringToFront();
    }
}
function resetHighlightReg(e) {
    vectorLayers['reg_aura_2']['objet'].resetStyle(e.target);
	//console.log(e.target.feature)
}
function resetHighlightDisp(e) {
    vectorLayers['disp_reg_2']['objet'].resetStyle(e.target);
}
function zoomToFeature(e) {
    //map.fitBounds(e.target.getBounds());
}

function onEachFeature(feature, layer) {
        var popupContent="";
        if (feature.properties && feature.properties.nom_site) {
            popupContent += 'nom : ' + feature.properties.nom_site + "<br>";
			popupContent += 'id polair : ' + feature.properties.id_polair.toString() + "<br>";
			popupContent += 'typologie : ' + feature.properties.lib_typologie + "<br>";
			popupContent += '<img class="popup-img" src="'+feature.properties.photo+'" ><br>';
			
        }
        layer.bindPopup(popupContent);
    }
function onEachFeatureEPCI(feature, layer) {
	var popupContent="";
	if (feature.properties && feature.properties.NOM_EPCI) {
		
		popupContent += 'NOM_EPCI : ' + feature.properties.NOM_EPCI + "<br>";
		
	
		
	}
	layer.bindPopup(popupContent);
}

function onEachFeatureReg(feature, layer) {
        var popupContent="";
        if (feature.properties && feature.properties.NOM_REG) {
            popupContent += feature.properties.NOM_REG;
            

        }
		layer.on({
			mouseover: highlightFeature,
			mouseout: resetHighlightReg,
			click: zoomToFeature
		});
        layer.bindPopup(popupContent);
    }
function onEachFeatureDisp(feature, layer) {
        var popupContent="";
        if (feature.properties && feature.properties.lib_court_) {
			popupContent += feature.properties.id_zone + '<br>';
            popupContent += feature.properties.lib_court_;
			
        }
		layer.on({
			mouseover: highlightFeature,
			mouseout:resetHighlightDisp,
			click: zoomToFeature
		});
        layer.bindPopup(popupContent);
    }
// Enregistrement du polluant et de l'??ce par defaut



var reg_aura;
$.ajax({
	dataType: "json",
    url: "{% static 'raster/vector_files/region_4326_AE.geojson' %}",
    success : function(msg){
        //j=JSON.parse(msg)
        reg_aura = L.geoJSON(
            msg,
            {
                onEachFeature: onEachFeatureReg,
                style : myStyle
            }
        )

        vectorLayers['reg_aura']= {'objet' : reg_aura}
        //clone grace au plugin clonelayer pour permettre d'afficher sur les 2 frames
        var  reg_aura_2 = cloneLayer(reg_aura);
        vectorLayers['reg_aura_2']= {'objet' : reg_aura_2}

    }
});
var disp_reg;
var disp_reg_2;

$.ajax({
    dataType: "json",
    url: "{% static 'raster/vector_files/disp_reg_aura_4326.geojson' %}",
    success : function(msg){
        //j=JSON.parse(msg)
		console.log(msg)
        disp_reg= L.geoJSON(
            msg,
            {
                onEachFeature: onEachFeatureDisp,
                style : myStyle
            }
        )
        vectorLayers['disp_reg']= {'objet' : disp_reg}
        //clone grace au plugin clonelayer pour permettre d'afficher sur les 2 frames
        var  disp_reg_2 = cloneLayer(disp_reg);
        vectorLayers['disp_reg_2']= {'objet' : disp_reg_2}

    }
});


var layer_sites_fixes;
$.ajax({
	dataType: "json",
    url: '{% static "raster/vector_files/site_fixe_2017.geojson"  %}',
    success : function(msg){
        layer_sites_fixes = L.geoJSON(
            msg,
            {
                onEachFeature: onEachFeature,
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, sites_fixes_style);
                }
            }
        )
        
        vectorLayers['layer_sites_fixes']= {'objet' : layer_sites_fixes}
        //clone grace au plugin clonelayer pour permettre d'afficher sur les 2 frames
        var  layer_sites_fixes_2 = cloneLayer(layer_sites_fixes);
        vectorLayers['layer_sites_fixes_2']= {'objet' : layer_sites_fixes_2}

    }
});
var epci;
var epci_2
$.ajax({
	dataType: "json",
    url: '{% static "raster/vector_files/epci_4326_AE.geojson"  %}',
    success : function(msg){
        epci = L.geoJSON(
            msg,
            {
                onEachFeature: onEachFeatureEPCI,
                style :  myStyle
            }
        )
        
        vectorLayers['epci']= {'objet' : epci}
        //clone grace au plugin clonelayer pour permettre d'afficher sur les 2 frames
        var  epci_2 = cloneLayer(epci);
        vectorLayers['epci_2']= {'objet' : epci_2}

    }
});
$(function() {
    $('.vector-layer').children().click( function() {
        var id = $(this).attr('id')
        substr = "close";
        string= $('#'+id + ' > span').attr('class')
        if (string.indexOf(substr) > -1) {
            $('#'+id + ' > span').removeClass('glyphicon-eye-close')
            $('#'+id + ' > span').addClass('glyphicon-eye-open')
        }
        else {
            $('#'+id + ' > span').removeClass('glyphicon-eye-open')
            $('#'+id + ' > span').addClass('glyphicon-eye-close')
        }
        if ($(this).closest("#map-block1").length == 1){
            ob=vectorLayers[id]['objet']
            if (map.hasLayer(ob)){
                console.log(ob)
                ob.removeFrom(map)
            }
            else {
                
                ob.addTo(map)
            }
        }
        if ($(this).closest("#map-block2").length == 1){
            ob=vectorLayers[id]['objet']
            console.log(ob)
            if (map2.hasLayer(ob)){             
                ob.removeFrom(map2)
            }
            else {
                ob.addTo(map2)
            }
        }
    })
})
function setMenu(tsp,ech,poll){
    console.log(tsp,ech,poll)
    var id_source
    var id_prev
    $.ajax({
        url:'{% url "get_ids" %}',
        data : {
            tsp : tsp,
            ech : ech,
            poll : poll
        },
        async : false,
        success : function(msg){
            console.log(msg)
            id_source = msg['source'],
            id_prev = msg['prev']
            id="#"+tsp.toString()+'-'+ech.toString()
            $(id).css("background-color","#ddd")
            if ($("#"+id_source).length < 1) {
                last_prev=msg
                html='<a href="#" class="list-group-item point-item baselayer" onclick=showChoices('+id_source+','+id_prev+') id="'+id_source+'"> <h4 class="list-group-item-heading" ></h4>'+poll+ ' - '+(new Date(tsp)).toLocaleDateString()+ ' - ech : ' + (ech-1).toString()+ '    <span onclick=removeLayerBtn('+id_source+',\''+id+'\') style="float : right;" class="glyphicon glyphicon-remove-circle"></span></a>'            
                $(".raster-menu-left").append(html)
                $("#"+id_source).hover(
                    function(){
                        $(this).css("background-color","#eee")
                        id="#"+tsp.toString()+'-'+ech.toString()
                        $(id).css("background-color","orange")
                    },
                    function(){
                        $(this).css("background-color","white")
                       id="#"+tsp.toString()+'-'+ech.toString()
                        $(id).css("background-color","#ddd")
                    },
                )
                $(id).hover(
                    function(){
                        
                        $("#"+id_source).css("background-color","orange")
                    },
                    function(){
                      
                        $("#"+id_source).css("background-color","white")
                    },
                )
            }
        }
    })
    showChoices(id_source,id_prev)      
    //get_map_corr(id_source)    
    
}
function removeLayerBtn(id_source,id){
    $("#"+id_source).remove()
	$(".div-fine").remove()
    $(id).css("background-color","#f8f8f8")
}
function get_map_corr(id_source,mode){
    console.log(mode)
   if ( activeLayer1 != null) {
        map.removeLayer(activeLayer1[1])
        console.log(activeLayer1[1])
    }
    url_bbox='{% url "bbox_raster" %}'

    img=img_raster_url(id_source,mode)



    // s1="'{% "
    // s2=" %}'"
    // s3=s1 + s + s2
    // console.log(s1 + s + s2)
    $.ajax({
        //recup de scoins de la carte necessaires pour que leaflet affiche le png
        url: url_bbox,
        data : {
            id:id_source,
            randomnocache : Math.random()
        },
        success : function(msg){
            anchors = [
                [msg['ymax'], msg['xmin']], //haut gauche
                [msg['ymax'], msg['xmax']], //haut droite
                [msg['ymin'], msg['xmax']], //bas droite
                [msg['ymin'], msg['xmin']]  //bas gauche
            ];
            //console.log(anchors)
            lay = L.imageTransform(img, anchors, {opacity:0.7, attribution: 'Cartes de pollution: ATMO Aura'});     
            lay.addTo(map)
            activeLayer1=[id_source,lay];
            
            //console.log(id_source.toString())
            //var tbl=meta_source_tbl(liste_sources[id_source])
            // $('#active_layer_div1 > table').remove()
            // $('#active_layer_div1').append(tbl)
        }
    }) 
}
function img_raster_url(id_source,mode){
    var img='';
    url_img='{% url "img_raster_url" %}'
    $.ajax({
        url:url_img,
        async : false,
        data : { 
        mode : mode,
         randomnocache: Math.random(),
            id_source : id_source
        },
       
        success : function(msg){
            img=msg
        }
    })
    return img;
}
function showChoices(id_source,id_prev){
    $("#btn-brute-" + id_source).remove()
    $("#btn-corr-" + id_source).remove()
    $("#"+id_source).after("<button id='btn-corr-"+id_source+"' onclick=get_map_corr("+id_source+",\'corrigee\')>corrigé</button>")
    $("#"+id_source).after("<button id='btn-brute-"+id_source+"' onclick=get_map_corr("+id_source+",\'brute\')>brut</button>")
	$("#"+id_source).after('<div class="div-fine" id="stats-btn-'+id_prev.toString()+'"><button  onclick="statsShow('+id_prev+')" class="btn btn-secondary btn-fine"><i>Stats reg.</i></button><button  onclick="get_stats_reg_unique('+id_prev+')" class="btn btn-secondary btn-fine refresh-stats-btn"> <i class="glyphicon glyphicon-refresh"></i></button></div>')
}
function remove_stats_form(){
    $('#mask').hide()
    $('#stats_div').hide()
}
function statsShow(id_prev){
    obs=prevs
    $('#mask').show()
    $('#stats_tbl >  tbody').remove()
    $('#stats_div').show()
    $('#stats_tbl').append('<tbody></tbody>')
    for (i in obs){
        console.log(i)
        ligne = getStatHTML(i,obs[i])
        console.log(ligne)
        $('#stats_tbl >  tbody').append(ligne)
    }
}
function bool_lib(b){
    dep_lib=''
    if (b==false){
        dep_lib='non'
    }
    else if (b==true){
        dep_lib='oui'
    }
    return dep_lib
}
function getStatHTML(id,obj){
    lib=obj['lib']
    dpa=obj['depassement_pop_alerte']
    dpa=bool_lib(dpa)
    dpi=obj['depassement_pop_info']
    dpi=bool_lib(dpi)
    dsa=obj['depassement_surf_alerte']
    dsa=bool_lib(dsa)
    dsi=obj['depassement_surf_info']
    dsi=bool_lib(dsi)
    pea=obj['pop_exp_alerte']
    pei=obj['pop_exp_info']
    pepa=obj['pop_exp_perc_alerte']
    pepi=obj['pop_exp_perc_info']
    sea=obj['surf_exp_alerte']
    sei=obj['surf_exp_info']
    sepa=obj['surf_exp_perc_alerte']
    sepi=obj['surf_exp_perc_info']
	max=obj['max']
	mean=obj['mean']
    tr_dep_cls='tr_grey'
    if (dsi=='oui'){
        tr_dep_cls='tr_red'      
    }
    if (dpi=='oui'){
        tr_dep_cls='tr_red'
    }
    if (dsa=='oui'){
        tr_dep_cls='tr_brown'     
    }
    if (dpa=='oui'){
        tr_dep_cls='tr_brown'
    }
    s='<tr class="'+tr_dep_cls+'">'+
        '<td>'+id+'</td>'+
        '<td style="border-right : 1px solid black;">'+lib+'</td>'+
		'<td>'+mean+'</td>'+
        '<td style="border-right: 1px solid black;">'+max+'</td>'+
        '<td>'+sei+'</td>'+
        '<td>'+sepi+'</td>'+
        '<td>'+dsi+'</td>'+
        '<td>'+pei+'</td>'+
        '<td>'+pepi+'</td>'+
        '<td style="border-right : 1px solid black;">'+dpi+'</td>'+
        '<td>'+sea+'</td>'+
        '<td>'+sepa+'</td>'+
        '<td>'+dsa+'</td>'+
        '<td>'+pea+'</td>'+
        '<td>'+pepa+'</td>'+
        '<td>'+dpa+'</td>'+
    '</tr>'
	
    return s
}
function get_stats_reg_unique(id_prev){
    //show_msg()
    url_img='{% url "calcul_stats_reg"  %}'
    //msg_add_content('<div> ' +prevs[id_prev][0].toString() +' - '+ prevs[id_prev][1].toString() + ' : en cours ... </div>')
    $.ajax({
        url : url_img,
        async : false,
        data : { 
            id_prev : id_prev,
             randomnocache: Math.random()
        },
        success: 
            function(msg){
                prevs=msg
				console.log(msg['2003'])
                //msg_add_content('<div> ' +prevs[id_prev][0].toString() +' - '+ prevs[id_prev][1].toString() + ' : OK </div>')
            }
        ,error : function () {
           // msg_add_content('<div> ' +prevs[id_prev][0].toString() +' - '+ prevs[id_prev][1].toString() + ' : échec </div>')
        }
    })
}